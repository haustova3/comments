// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package create_comment

//go:generate minimock -i example/comments/internal/usecases/create-comment.ProductsService -o products_service_mock_test.go -n ProductsServiceMock -p create_comment

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductsServiceMock implements ProductsService
type ProductsServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetProductOwner          func(ctx context.Context, productID int64) (i1 int64, err error)
	funcGetProductOwnerOrigin    string
	inspectFuncGetProductOwner   func(ctx context.Context, productID int64)
	afterGetProductOwnerCounter  uint64
	beforeGetProductOwnerCounter uint64
	GetProductOwnerMock          mProductsServiceMockGetProductOwner
}

// NewProductsServiceMock returns a mock for ProductsService
func NewProductsServiceMock(t minimock.Tester) *ProductsServiceMock {
	m := &ProductsServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductOwnerMock = mProductsServiceMockGetProductOwner{mock: m}
	m.GetProductOwnerMock.callArgs = []*ProductsServiceMockGetProductOwnerParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductsServiceMockGetProductOwner struct {
	optional           bool
	mock               *ProductsServiceMock
	defaultExpectation *ProductsServiceMockGetProductOwnerExpectation
	expectations       []*ProductsServiceMockGetProductOwnerExpectation

	callArgs []*ProductsServiceMockGetProductOwnerParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProductsServiceMockGetProductOwnerExpectation specifies expectation struct of the ProductsService.GetProductOwner
type ProductsServiceMockGetProductOwnerExpectation struct {
	mock               *ProductsServiceMock
	params             *ProductsServiceMockGetProductOwnerParams
	paramPtrs          *ProductsServiceMockGetProductOwnerParamPtrs
	expectationOrigins ProductsServiceMockGetProductOwnerExpectationOrigins
	results            *ProductsServiceMockGetProductOwnerResults
	returnOrigin       string
	Counter            uint64
}

// ProductsServiceMockGetProductOwnerParams contains parameters of the ProductsService.GetProductOwner
type ProductsServiceMockGetProductOwnerParams struct {
	ctx       context.Context
	productID int64
}

// ProductsServiceMockGetProductOwnerParamPtrs contains pointers to parameters of the ProductsService.GetProductOwner
type ProductsServiceMockGetProductOwnerParamPtrs struct {
	ctx       *context.Context
	productID *int64
}

// ProductsServiceMockGetProductOwnerResults contains results of the ProductsService.GetProductOwner
type ProductsServiceMockGetProductOwnerResults struct {
	i1  int64
	err error
}

// ProductsServiceMockGetProductOwnerOrigins contains origins of expectations of the ProductsService.GetProductOwner
type ProductsServiceMockGetProductOwnerExpectationOrigins struct {
	origin          string
	originCtx       string
	originProductID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetProductOwner *mProductsServiceMockGetProductOwner) Optional() *mProductsServiceMockGetProductOwner {
	mmGetProductOwner.optional = true
	return mmGetProductOwner
}

// Expect sets up expected params for ProductsService.GetProductOwner
func (mmGetProductOwner *mProductsServiceMockGetProductOwner) Expect(ctx context.Context, productID int64) *mProductsServiceMockGetProductOwner {
	if mmGetProductOwner.mock.funcGetProductOwner != nil {
		mmGetProductOwner.mock.t.Fatalf("ProductsServiceMock.GetProductOwner mock is already set by Set")
	}

	if mmGetProductOwner.defaultExpectation == nil {
		mmGetProductOwner.defaultExpectation = &ProductsServiceMockGetProductOwnerExpectation{}
	}

	if mmGetProductOwner.defaultExpectation.paramPtrs != nil {
		mmGetProductOwner.mock.t.Fatalf("ProductsServiceMock.GetProductOwner mock is already set by ExpectParams functions")
	}

	mmGetProductOwner.defaultExpectation.params = &ProductsServiceMockGetProductOwnerParams{ctx, productID}
	mmGetProductOwner.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetProductOwner.expectations {
		if minimock.Equal(e.params, mmGetProductOwner.defaultExpectation.params) {
			mmGetProductOwner.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProductOwner.defaultExpectation.params)
		}
	}

	return mmGetProductOwner
}

// ExpectCtxParam1 sets up expected param ctx for ProductsService.GetProductOwner
func (mmGetProductOwner *mProductsServiceMockGetProductOwner) ExpectCtxParam1(ctx context.Context) *mProductsServiceMockGetProductOwner {
	if mmGetProductOwner.mock.funcGetProductOwner != nil {
		mmGetProductOwner.mock.t.Fatalf("ProductsServiceMock.GetProductOwner mock is already set by Set")
	}

	if mmGetProductOwner.defaultExpectation == nil {
		mmGetProductOwner.defaultExpectation = &ProductsServiceMockGetProductOwnerExpectation{}
	}

	if mmGetProductOwner.defaultExpectation.params != nil {
		mmGetProductOwner.mock.t.Fatalf("ProductsServiceMock.GetProductOwner mock is already set by Expect")
	}

	if mmGetProductOwner.defaultExpectation.paramPtrs == nil {
		mmGetProductOwner.defaultExpectation.paramPtrs = &ProductsServiceMockGetProductOwnerParamPtrs{}
	}
	mmGetProductOwner.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetProductOwner.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetProductOwner
}

// ExpectProductIDParam2 sets up expected param productID for ProductsService.GetProductOwner
func (mmGetProductOwner *mProductsServiceMockGetProductOwner) ExpectProductIDParam2(productID int64) *mProductsServiceMockGetProductOwner {
	if mmGetProductOwner.mock.funcGetProductOwner != nil {
		mmGetProductOwner.mock.t.Fatalf("ProductsServiceMock.GetProductOwner mock is already set by Set")
	}

	if mmGetProductOwner.defaultExpectation == nil {
		mmGetProductOwner.defaultExpectation = &ProductsServiceMockGetProductOwnerExpectation{}
	}

	if mmGetProductOwner.defaultExpectation.params != nil {
		mmGetProductOwner.mock.t.Fatalf("ProductsServiceMock.GetProductOwner mock is already set by Expect")
	}

	if mmGetProductOwner.defaultExpectation.paramPtrs == nil {
		mmGetProductOwner.defaultExpectation.paramPtrs = &ProductsServiceMockGetProductOwnerParamPtrs{}
	}
	mmGetProductOwner.defaultExpectation.paramPtrs.productID = &productID
	mmGetProductOwner.defaultExpectation.expectationOrigins.originProductID = minimock.CallerInfo(1)

	return mmGetProductOwner
}

// Inspect accepts an inspector function that has same arguments as the ProductsService.GetProductOwner
func (mmGetProductOwner *mProductsServiceMockGetProductOwner) Inspect(f func(ctx context.Context, productID int64)) *mProductsServiceMockGetProductOwner {
	if mmGetProductOwner.mock.inspectFuncGetProductOwner != nil {
		mmGetProductOwner.mock.t.Fatalf("Inspect function is already set for ProductsServiceMock.GetProductOwner")
	}

	mmGetProductOwner.mock.inspectFuncGetProductOwner = f

	return mmGetProductOwner
}

// Return sets up results that will be returned by ProductsService.GetProductOwner
func (mmGetProductOwner *mProductsServiceMockGetProductOwner) Return(i1 int64, err error) *ProductsServiceMock {
	if mmGetProductOwner.mock.funcGetProductOwner != nil {
		mmGetProductOwner.mock.t.Fatalf("ProductsServiceMock.GetProductOwner mock is already set by Set")
	}

	if mmGetProductOwner.defaultExpectation == nil {
		mmGetProductOwner.defaultExpectation = &ProductsServiceMockGetProductOwnerExpectation{mock: mmGetProductOwner.mock}
	}
	mmGetProductOwner.defaultExpectation.results = &ProductsServiceMockGetProductOwnerResults{i1, err}
	mmGetProductOwner.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetProductOwner.mock
}

// Set uses given function f to mock the ProductsService.GetProductOwner method
func (mmGetProductOwner *mProductsServiceMockGetProductOwner) Set(f func(ctx context.Context, productID int64) (i1 int64, err error)) *ProductsServiceMock {
	if mmGetProductOwner.defaultExpectation != nil {
		mmGetProductOwner.mock.t.Fatalf("Default expectation is already set for the ProductsService.GetProductOwner method")
	}

	if len(mmGetProductOwner.expectations) > 0 {
		mmGetProductOwner.mock.t.Fatalf("Some expectations are already set for the ProductsService.GetProductOwner method")
	}

	mmGetProductOwner.mock.funcGetProductOwner = f
	mmGetProductOwner.mock.funcGetProductOwnerOrigin = minimock.CallerInfo(1)
	return mmGetProductOwner.mock
}

// When sets expectation for the ProductsService.GetProductOwner which will trigger the result defined by the following
// Then helper
func (mmGetProductOwner *mProductsServiceMockGetProductOwner) When(ctx context.Context, productID int64) *ProductsServiceMockGetProductOwnerExpectation {
	if mmGetProductOwner.mock.funcGetProductOwner != nil {
		mmGetProductOwner.mock.t.Fatalf("ProductsServiceMock.GetProductOwner mock is already set by Set")
	}

	expectation := &ProductsServiceMockGetProductOwnerExpectation{
		mock:               mmGetProductOwner.mock,
		params:             &ProductsServiceMockGetProductOwnerParams{ctx, productID},
		expectationOrigins: ProductsServiceMockGetProductOwnerExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetProductOwner.expectations = append(mmGetProductOwner.expectations, expectation)
	return expectation
}

// Then sets up ProductsService.GetProductOwner return parameters for the expectation previously defined by the When method
func (e *ProductsServiceMockGetProductOwnerExpectation) Then(i1 int64, err error) *ProductsServiceMock {
	e.results = &ProductsServiceMockGetProductOwnerResults{i1, err}
	return e.mock
}

// Times sets number of times ProductsService.GetProductOwner should be invoked
func (mmGetProductOwner *mProductsServiceMockGetProductOwner) Times(n uint64) *mProductsServiceMockGetProductOwner {
	if n == 0 {
		mmGetProductOwner.mock.t.Fatalf("Times of ProductsServiceMock.GetProductOwner mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetProductOwner.expectedInvocations, n)
	mmGetProductOwner.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetProductOwner
}

func (mmGetProductOwner *mProductsServiceMockGetProductOwner) invocationsDone() bool {
	if len(mmGetProductOwner.expectations) == 0 && mmGetProductOwner.defaultExpectation == nil && mmGetProductOwner.mock.funcGetProductOwner == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetProductOwner.mock.afterGetProductOwnerCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetProductOwner.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetProductOwner implements ProductsService
func (mmGetProductOwner *ProductsServiceMock) GetProductOwner(ctx context.Context, productID int64) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmGetProductOwner.beforeGetProductOwnerCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductOwner.afterGetProductOwnerCounter, 1)

	mmGetProductOwner.t.Helper()

	if mmGetProductOwner.inspectFuncGetProductOwner != nil {
		mmGetProductOwner.inspectFuncGetProductOwner(ctx, productID)
	}

	mm_params := ProductsServiceMockGetProductOwnerParams{ctx, productID}

	// Record call args
	mmGetProductOwner.GetProductOwnerMock.mutex.Lock()
	mmGetProductOwner.GetProductOwnerMock.callArgs = append(mmGetProductOwner.GetProductOwnerMock.callArgs, &mm_params)
	mmGetProductOwner.GetProductOwnerMock.mutex.Unlock()

	for _, e := range mmGetProductOwner.GetProductOwnerMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmGetProductOwner.GetProductOwnerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductOwner.GetProductOwnerMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProductOwner.GetProductOwnerMock.defaultExpectation.params
		mm_want_ptrs := mmGetProductOwner.GetProductOwnerMock.defaultExpectation.paramPtrs

		mm_got := ProductsServiceMockGetProductOwnerParams{ctx, productID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetProductOwner.t.Errorf("ProductsServiceMock.GetProductOwner got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetProductOwner.GetProductOwnerMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.productID != nil && !minimock.Equal(*mm_want_ptrs.productID, mm_got.productID) {
				mmGetProductOwner.t.Errorf("ProductsServiceMock.GetProductOwner got unexpected parameter productID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetProductOwner.GetProductOwnerMock.defaultExpectation.expectationOrigins.originProductID, *mm_want_ptrs.productID, mm_got.productID, minimock.Diff(*mm_want_ptrs.productID, mm_got.productID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProductOwner.t.Errorf("ProductsServiceMock.GetProductOwner got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetProductOwner.GetProductOwnerMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProductOwner.GetProductOwnerMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProductOwner.t.Fatal("No results are set for the ProductsServiceMock.GetProductOwner")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmGetProductOwner.funcGetProductOwner != nil {
		return mmGetProductOwner.funcGetProductOwner(ctx, productID)
	}
	mmGetProductOwner.t.Fatalf("Unexpected call to ProductsServiceMock.GetProductOwner. %v %v", ctx, productID)
	return
}

// GetProductOwnerAfterCounter returns a count of finished ProductsServiceMock.GetProductOwner invocations
func (mmGetProductOwner *ProductsServiceMock) GetProductOwnerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductOwner.afterGetProductOwnerCounter)
}

// GetProductOwnerBeforeCounter returns a count of ProductsServiceMock.GetProductOwner invocations
func (mmGetProductOwner *ProductsServiceMock) GetProductOwnerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductOwner.beforeGetProductOwnerCounter)
}

// Calls returns a list of arguments used in each call to ProductsServiceMock.GetProductOwner.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProductOwner *mProductsServiceMockGetProductOwner) Calls() []*ProductsServiceMockGetProductOwnerParams {
	mmGetProductOwner.mutex.RLock()

	argCopy := make([]*ProductsServiceMockGetProductOwnerParams, len(mmGetProductOwner.callArgs))
	copy(argCopy, mmGetProductOwner.callArgs)

	mmGetProductOwner.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductOwnerDone returns true if the count of the GetProductOwner invocations corresponds
// the number of defined expectations
func (m *ProductsServiceMock) MinimockGetProductOwnerDone() bool {
	if m.GetProductOwnerMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetProductOwnerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetProductOwnerMock.invocationsDone()
}

// MinimockGetProductOwnerInspect logs each unmet expectation
func (m *ProductsServiceMock) MinimockGetProductOwnerInspect() {
	for _, e := range m.GetProductOwnerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductsServiceMock.GetProductOwner at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetProductOwnerCounter := mm_atomic.LoadUint64(&m.afterGetProductOwnerCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductOwnerMock.defaultExpectation != nil && afterGetProductOwnerCounter < 1 {
		if m.GetProductOwnerMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProductsServiceMock.GetProductOwner at\n%s", m.GetProductOwnerMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProductsServiceMock.GetProductOwner at\n%s with params: %#v", m.GetProductOwnerMock.defaultExpectation.expectationOrigins.origin, *m.GetProductOwnerMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductOwner != nil && afterGetProductOwnerCounter < 1 {
		m.t.Errorf("Expected call to ProductsServiceMock.GetProductOwner at\n%s", m.funcGetProductOwnerOrigin)
	}

	if !m.GetProductOwnerMock.invocationsDone() && afterGetProductOwnerCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductsServiceMock.GetProductOwner at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetProductOwnerMock.expectedInvocations), m.GetProductOwnerMock.expectedInvocationsOrigin, afterGetProductOwnerCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductsServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetProductOwnerInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductsServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductsServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductOwnerDone()
}
