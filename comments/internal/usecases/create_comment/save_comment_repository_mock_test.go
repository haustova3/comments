// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package create_comment

//go:generate minimock -i example/comments/internal/usecases/create-comment.SaveCommentRepository -o save_comment_repository_mock_test.go -n SaveCommentRepositoryMock -p create_comment

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// SaveCommentRepositoryMock implements SaveCommentRepository
type SaveCommentRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSaveComment          func(ctx context.Context, comment Comment) (i1 int64, err error)
	funcSaveCommentOrigin    string
	inspectFuncSaveComment   func(ctx context.Context, comment Comment)
	afterSaveCommentCounter  uint64
	beforeSaveCommentCounter uint64
	SaveCommentMock          mSaveCommentRepositoryMockSaveComment
}

// NewSaveCommentRepositoryMock returns a mock for SaveCommentRepository
func NewSaveCommentRepositoryMock(t minimock.Tester) *SaveCommentRepositoryMock {
	m := &SaveCommentRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SaveCommentMock = mSaveCommentRepositoryMockSaveComment{mock: m}
	m.SaveCommentMock.callArgs = []*SaveCommentRepositoryMockSaveCommentParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mSaveCommentRepositoryMockSaveComment struct {
	optional           bool
	mock               *SaveCommentRepositoryMock
	defaultExpectation *SaveCommentRepositoryMockSaveCommentExpectation
	expectations       []*SaveCommentRepositoryMockSaveCommentExpectation

	callArgs []*SaveCommentRepositoryMockSaveCommentParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// SaveCommentRepositoryMockSaveCommentExpectation specifies expectation struct of the SaveCommentRepository.SaveComment
type SaveCommentRepositoryMockSaveCommentExpectation struct {
	mock               *SaveCommentRepositoryMock
	params             *SaveCommentRepositoryMockSaveCommentParams
	paramPtrs          *SaveCommentRepositoryMockSaveCommentParamPtrs
	expectationOrigins SaveCommentRepositoryMockSaveCommentExpectationOrigins
	results            *SaveCommentRepositoryMockSaveCommentResults
	returnOrigin       string
	Counter            uint64
}

// SaveCommentRepositoryMockSaveCommentParams contains parameters of the SaveCommentRepository.SaveComment
type SaveCommentRepositoryMockSaveCommentParams struct {
	ctx     context.Context
	comment Comment
}

// SaveCommentRepositoryMockSaveCommentParamPtrs contains pointers to parameters of the SaveCommentRepository.SaveComment
type SaveCommentRepositoryMockSaveCommentParamPtrs struct {
	ctx     *context.Context
	comment *Comment
}

// SaveCommentRepositoryMockSaveCommentResults contains results of the SaveCommentRepository.SaveComment
type SaveCommentRepositoryMockSaveCommentResults struct {
	i1  int64
	err error
}

// SaveCommentRepositoryMockSaveCommentOrigins contains origins of expectations of the SaveCommentRepository.SaveComment
type SaveCommentRepositoryMockSaveCommentExpectationOrigins struct {
	origin        string
	originCtx     string
	originComment string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSaveComment *mSaveCommentRepositoryMockSaveComment) Optional() *mSaveCommentRepositoryMockSaveComment {
	mmSaveComment.optional = true
	return mmSaveComment
}

// Expect sets up expected params for SaveCommentRepository.SaveComment
func (mmSaveComment *mSaveCommentRepositoryMockSaveComment) Expect(ctx context.Context, comment Comment) *mSaveCommentRepositoryMockSaveComment {
	if mmSaveComment.mock.funcSaveComment != nil {
		mmSaveComment.mock.t.Fatalf("SaveCommentRepositoryMock.SaveComment mock is already set by Set")
	}

	if mmSaveComment.defaultExpectation == nil {
		mmSaveComment.defaultExpectation = &SaveCommentRepositoryMockSaveCommentExpectation{}
	}

	if mmSaveComment.defaultExpectation.paramPtrs != nil {
		mmSaveComment.mock.t.Fatalf("SaveCommentRepositoryMock.SaveComment mock is already set by ExpectParams functions")
	}

	mmSaveComment.defaultExpectation.params = &SaveCommentRepositoryMockSaveCommentParams{ctx, comment}
	mmSaveComment.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSaveComment.expectations {
		if minimock.Equal(e.params, mmSaveComment.defaultExpectation.params) {
			mmSaveComment.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveComment.defaultExpectation.params)
		}
	}

	return mmSaveComment
}

// ExpectCtxParam1 sets up expected param ctx for SaveCommentRepository.SaveComment
func (mmSaveComment *mSaveCommentRepositoryMockSaveComment) ExpectCtxParam1(ctx context.Context) *mSaveCommentRepositoryMockSaveComment {
	if mmSaveComment.mock.funcSaveComment != nil {
		mmSaveComment.mock.t.Fatalf("SaveCommentRepositoryMock.SaveComment mock is already set by Set")
	}

	if mmSaveComment.defaultExpectation == nil {
		mmSaveComment.defaultExpectation = &SaveCommentRepositoryMockSaveCommentExpectation{}
	}

	if mmSaveComment.defaultExpectation.params != nil {
		mmSaveComment.mock.t.Fatalf("SaveCommentRepositoryMock.SaveComment mock is already set by Expect")
	}

	if mmSaveComment.defaultExpectation.paramPtrs == nil {
		mmSaveComment.defaultExpectation.paramPtrs = &SaveCommentRepositoryMockSaveCommentParamPtrs{}
	}
	mmSaveComment.defaultExpectation.paramPtrs.ctx = &ctx
	mmSaveComment.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSaveComment
}

// ExpectCommentParam2 sets up expected param comment for SaveCommentRepository.SaveComment
func (mmSaveComment *mSaveCommentRepositoryMockSaveComment) ExpectCommentParam2(comment Comment) *mSaveCommentRepositoryMockSaveComment {
	if mmSaveComment.mock.funcSaveComment != nil {
		mmSaveComment.mock.t.Fatalf("SaveCommentRepositoryMock.SaveComment mock is already set by Set")
	}

	if mmSaveComment.defaultExpectation == nil {
		mmSaveComment.defaultExpectation = &SaveCommentRepositoryMockSaveCommentExpectation{}
	}

	if mmSaveComment.defaultExpectation.params != nil {
		mmSaveComment.mock.t.Fatalf("SaveCommentRepositoryMock.SaveComment mock is already set by Expect")
	}

	if mmSaveComment.defaultExpectation.paramPtrs == nil {
		mmSaveComment.defaultExpectation.paramPtrs = &SaveCommentRepositoryMockSaveCommentParamPtrs{}
	}
	mmSaveComment.defaultExpectation.paramPtrs.comment = &comment
	mmSaveComment.defaultExpectation.expectationOrigins.originComment = minimock.CallerInfo(1)

	return mmSaveComment
}

// Inspect accepts an inspector function that has same arguments as the SaveCommentRepository.SaveComment
func (mmSaveComment *mSaveCommentRepositoryMockSaveComment) Inspect(f func(ctx context.Context, comment Comment)) *mSaveCommentRepositoryMockSaveComment {
	if mmSaveComment.mock.inspectFuncSaveComment != nil {
		mmSaveComment.mock.t.Fatalf("Inspect function is already set for SaveCommentRepositoryMock.SaveComment")
	}

	mmSaveComment.mock.inspectFuncSaveComment = f

	return mmSaveComment
}

// Return sets up results that will be returned by SaveCommentRepository.SaveComment
func (mmSaveComment *mSaveCommentRepositoryMockSaveComment) Return(i1 int64, err error) *SaveCommentRepositoryMock {
	if mmSaveComment.mock.funcSaveComment != nil {
		mmSaveComment.mock.t.Fatalf("SaveCommentRepositoryMock.SaveComment mock is already set by Set")
	}

	if mmSaveComment.defaultExpectation == nil {
		mmSaveComment.defaultExpectation = &SaveCommentRepositoryMockSaveCommentExpectation{mock: mmSaveComment.mock}
	}
	mmSaveComment.defaultExpectation.results = &SaveCommentRepositoryMockSaveCommentResults{i1, err}
	mmSaveComment.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSaveComment.mock
}

// Set uses given function f to mock the SaveCommentRepository.SaveComment method
func (mmSaveComment *mSaveCommentRepositoryMockSaveComment) Set(f func(ctx context.Context, comment Comment) (i1 int64, err error)) *SaveCommentRepositoryMock {
	if mmSaveComment.defaultExpectation != nil {
		mmSaveComment.mock.t.Fatalf("Default expectation is already set for the SaveCommentRepository.SaveComment method")
	}

	if len(mmSaveComment.expectations) > 0 {
		mmSaveComment.mock.t.Fatalf("Some expectations are already set for the SaveCommentRepository.SaveComment method")
	}

	mmSaveComment.mock.funcSaveComment = f
	mmSaveComment.mock.funcSaveCommentOrigin = minimock.CallerInfo(1)
	return mmSaveComment.mock
}

// When sets expectation for the SaveCommentRepository.SaveComment which will trigger the result defined by the following
// Then helper
func (mmSaveComment *mSaveCommentRepositoryMockSaveComment) When(ctx context.Context, comment Comment) *SaveCommentRepositoryMockSaveCommentExpectation {
	if mmSaveComment.mock.funcSaveComment != nil {
		mmSaveComment.mock.t.Fatalf("SaveCommentRepositoryMock.SaveComment mock is already set by Set")
	}

	expectation := &SaveCommentRepositoryMockSaveCommentExpectation{
		mock:               mmSaveComment.mock,
		params:             &SaveCommentRepositoryMockSaveCommentParams{ctx, comment},
		expectationOrigins: SaveCommentRepositoryMockSaveCommentExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSaveComment.expectations = append(mmSaveComment.expectations, expectation)
	return expectation
}

// Then sets up SaveCommentRepository.SaveComment return parameters for the expectation previously defined by the When method
func (e *SaveCommentRepositoryMockSaveCommentExpectation) Then(i1 int64, err error) *SaveCommentRepositoryMock {
	e.results = &SaveCommentRepositoryMockSaveCommentResults{i1, err}
	return e.mock
}

// Times sets number of times SaveCommentRepository.SaveComment should be invoked
func (mmSaveComment *mSaveCommentRepositoryMockSaveComment) Times(n uint64) *mSaveCommentRepositoryMockSaveComment {
	if n == 0 {
		mmSaveComment.mock.t.Fatalf("Times of SaveCommentRepositoryMock.SaveComment mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSaveComment.expectedInvocations, n)
	mmSaveComment.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSaveComment
}

func (mmSaveComment *mSaveCommentRepositoryMockSaveComment) invocationsDone() bool {
	if len(mmSaveComment.expectations) == 0 && mmSaveComment.defaultExpectation == nil && mmSaveComment.mock.funcSaveComment == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSaveComment.mock.afterSaveCommentCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSaveComment.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SaveComment implements SaveCommentRepository
func (mmSaveComment *SaveCommentRepositoryMock) SaveComment(ctx context.Context, comment Comment) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmSaveComment.beforeSaveCommentCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveComment.afterSaveCommentCounter, 1)

	mmSaveComment.t.Helper()

	if mmSaveComment.inspectFuncSaveComment != nil {
		mmSaveComment.inspectFuncSaveComment(ctx, comment)
	}

	mm_params := SaveCommentRepositoryMockSaveCommentParams{ctx, comment}

	// Record call args
	mmSaveComment.SaveCommentMock.mutex.Lock()
	mmSaveComment.SaveCommentMock.callArgs = append(mmSaveComment.SaveCommentMock.callArgs, &mm_params)
	mmSaveComment.SaveCommentMock.mutex.Unlock()

	for _, e := range mmSaveComment.SaveCommentMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmSaveComment.SaveCommentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveComment.SaveCommentMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveComment.SaveCommentMock.defaultExpectation.params
		mm_want_ptrs := mmSaveComment.SaveCommentMock.defaultExpectation.paramPtrs

		mm_got := SaveCommentRepositoryMockSaveCommentParams{ctx, comment}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSaveComment.t.Errorf("SaveCommentRepositoryMock.SaveComment got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveComment.SaveCommentMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.comment != nil && !minimock.Equal(*mm_want_ptrs.comment, mm_got.comment) {
				mmSaveComment.t.Errorf("SaveCommentRepositoryMock.SaveComment got unexpected parameter comment, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveComment.SaveCommentMock.defaultExpectation.expectationOrigins.originComment, *mm_want_ptrs.comment, mm_got.comment, minimock.Diff(*mm_want_ptrs.comment, mm_got.comment))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveComment.t.Errorf("SaveCommentRepositoryMock.SaveComment got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSaveComment.SaveCommentMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveComment.SaveCommentMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveComment.t.Fatal("No results are set for the SaveCommentRepositoryMock.SaveComment")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmSaveComment.funcSaveComment != nil {
		return mmSaveComment.funcSaveComment(ctx, comment)
	}
	mmSaveComment.t.Fatalf("Unexpected call to SaveCommentRepositoryMock.SaveComment. %v %v", ctx, comment)
	return
}

// SaveCommentAfterCounter returns a count of finished SaveCommentRepositoryMock.SaveComment invocations
func (mmSaveComment *SaveCommentRepositoryMock) SaveCommentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveComment.afterSaveCommentCounter)
}

// SaveCommentBeforeCounter returns a count of SaveCommentRepositoryMock.SaveComment invocations
func (mmSaveComment *SaveCommentRepositoryMock) SaveCommentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveComment.beforeSaveCommentCounter)
}

// Calls returns a list of arguments used in each call to SaveCommentRepositoryMock.SaveComment.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveComment *mSaveCommentRepositoryMockSaveComment) Calls() []*SaveCommentRepositoryMockSaveCommentParams {
	mmSaveComment.mutex.RLock()

	argCopy := make([]*SaveCommentRepositoryMockSaveCommentParams, len(mmSaveComment.callArgs))
	copy(argCopy, mmSaveComment.callArgs)

	mmSaveComment.mutex.RUnlock()

	return argCopy
}

// MinimockSaveCommentDone returns true if the count of the SaveComment invocations corresponds
// the number of defined expectations
func (m *SaveCommentRepositoryMock) MinimockSaveCommentDone() bool {
	if m.SaveCommentMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveCommentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveCommentMock.invocationsDone()
}

// MinimockSaveCommentInspect logs each unmet expectation
func (m *SaveCommentRepositoryMock) MinimockSaveCommentInspect() {
	for _, e := range m.SaveCommentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SaveCommentRepositoryMock.SaveComment at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveCommentCounter := mm_atomic.LoadUint64(&m.afterSaveCommentCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveCommentMock.defaultExpectation != nil && afterSaveCommentCounter < 1 {
		if m.SaveCommentMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to SaveCommentRepositoryMock.SaveComment at\n%s", m.SaveCommentMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to SaveCommentRepositoryMock.SaveComment at\n%s with params: %#v", m.SaveCommentMock.defaultExpectation.expectationOrigins.origin, *m.SaveCommentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveComment != nil && afterSaveCommentCounter < 1 {
		m.t.Errorf("Expected call to SaveCommentRepositoryMock.SaveComment at\n%s", m.funcSaveCommentOrigin)
	}

	if !m.SaveCommentMock.invocationsDone() && afterSaveCommentCounter > 0 {
		m.t.Errorf("Expected %d calls to SaveCommentRepositoryMock.SaveComment at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveCommentMock.expectedInvocations), m.SaveCommentMock.expectedInvocationsOrigin, afterSaveCommentCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SaveCommentRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSaveCommentInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SaveCommentRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SaveCommentRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSaveCommentDone()
}
